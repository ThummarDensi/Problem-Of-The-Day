class Solution {
    // Function to merge overlapping intervals.
    mergeOverlap(arr) {
        if (arr.length === 0) return [];

        // Step 1: Sort intervals by their start times
        arr.sort((a, b) => a[0] - b[0]);

        const merged = [];
        let currentInterval = arr[0];

        for (let i = 1; i < arr.length; i++) {
            const [currentStart, currentEnd] = currentInterval;
            const [nextStart, nextEnd] = arr[i];

            // Check for overlap
            if (nextStart <= currentEnd) {
                // Merge intervals
                currentInterval = [currentStart, Math.max(currentEnd, nextEnd)];
            } else {
                // No overlap, add the current interval to the result
                merged.push(currentInterval);
                currentInterval = arr[i];
            }
        }

        // Add the last interval
        merged.push(currentInterval);

        return merged;
    }
}

// Example usage:
const solution = new Solution();

console.log(solution.mergeOverlap([[1, 3], [2, 4], [6, 8], [9, 10]])); // Output: [[1, 4], [6, 8], [9, 10]]
console.log(solution.mergeOverlap([[6, 8], [1, 9], [2, 4], [4, 7]]));  // Output: [[1, 9]]
