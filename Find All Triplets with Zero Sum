class Solution {
    /**
     * @param {number[]} arr
     * @return {number[][]}
     */
    findTriplets(arr) {
        const result = [];
        const n = arr.length;

        // Sort the array
        arr.sort((a, b) => a - b);

        for (let i = 0; i < n - 2; i++) {
            // Skip duplicates for the first element
            if (i > 0 && arr[i] === arr[i - 1]) continue;

            let left = i + 1;
            let right = n - 1;

            while (left < right) {
                const sum = arr[i] + arr[left] + arr[right];

                if (sum === 0) {
                    result.push([i, left, right]);
                    
                    // Move pointers and skip duplicates
                    while (left < right && arr[left] === arr[left + 1]) left++;
                    while (left < right && arr[right] === arr[right - 1]) right--;

                    left++;
                    right--;
                } else if (sum < 0) {
                    left++;
                } else {
                    right--;
                }
            }
        }

        return result;
    }
}

// Example usage:
const solution = new Solution();

console.log(solution.findTriplets([0, -1, 2, -3, 1])); // Output: [[0, 1, 4], [2, 3, 4]]
console.log(solution.findTriplets([1, -2, 1, 0, 5]));  // Output: [[0, 1, 2]]
console.log(solution.findTriplets([2, 3, 1, 0, 5]));   // Output: []
