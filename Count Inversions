class Solution {
    // Function to count inversions in the array.
    inversionCount(arr) {
        const n = arr.length;
        if (n < 2) return 0; // If array size is less than 2, no inversions
        
        let tempArr = Array(n).fill(0);
        
        // Call merge sort and count inversions
        return this.mergeSortAndCount(arr, tempArr, 0, n - 1);
    }

    // Helper function for merge sort
    mergeSortAndCount(arr, tempArr, left, right) {
        let invCount = 0;

        if (left < right) {
            const mid = Math.floor((left + right) / 2);

            // Count inversions in the left half
            invCount += this.mergeSortAndCount(arr, tempArr, left, mid);

            // Count inversions in the right half
            invCount += this.mergeSortAndCount(arr, tempArr, mid + 1, right);

            // Count inversions while merging
            invCount += this.mergeAndCount(arr, tempArr, left, mid, right);
        }

        return invCount;
    }

    // Helper function to merge two halves and count inversions
    mergeAndCount(arr, tempArr, left, mid, right) {
        let i = left; // Starting index for left subarray
        let j = mid + 1; // Starting index for right subarray
        let k = left; // Starting index for merged subarray
        let invCount = 0;

        // Merge the two subarrays
        while (i <= mid && j <= right) {
            if (arr[i] <= arr[j]) {
                tempArr[k++] = arr[i++];
            } else {
                // All elements remaining in the left subarray (arr[i] to arr[mid])
                // are greater than arr[j], so count inversions
                tempArr[k++] = arr[j++];
                invCount += (mid - i + 1);
            }
        }

        // Copy remaining elements of left subarray
        while (i <= mid) {
            tempArr[k++] = arr[i++];
        }

        // Copy remaining elements of right subarray
        while (j <= right) {
            tempArr[k++] = arr[j++];
        }

        // Copy the sorted subarray into the original array
        for (let l = left; l <= right; l++) {
            arr[l] = tempArr[l];
        }

        return invCount;
    }
}

// Example usage:
const solution = new Solution();
console.log(solution.inversionCount([2, 3, 4, 5, 6])); // Output: 0
console.log(solution.inversionCount([4, 1, 3, 5, 2])); // Output: 5
console.log(solution.inversionCount([10, 10, 10])); // Output: 0
