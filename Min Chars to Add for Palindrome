#include <string.h>
void computeLPSArray(char *pattern, int *lps, int n) {
    int length = 0; 
    lps[0] = 0; 
    int i = 1;

    while (i < n) {
        if (pattern[i] == pattern[length]) {
            length++;
            lps[i] = length;
            i++;
        } else {
            if (length != 0) {
                length = lps[length - 1];
            } else {
                lps[i] = 0;
                i++;
            }
        }
    }
}

int minChar(char str[]) {
    int n = strlen(str);
    char rev_str[n + 1];
    for (int i = 0; i < n; i++) {
        rev_str[i] = str[n - i - 1];
    }
    rev_str[n] = '\0';

    char concat[2 * n + 2];
    snprintf(concat, sizeof(concat), "%s#%s", str, rev_str);
    int l = strlen(concat);
    int lps[l];
    computeLPSArray(concat, lps, l);
    return n - lps[l - 1];
}
